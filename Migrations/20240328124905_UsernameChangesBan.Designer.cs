// <auto-generated />
using System;
using BeatLeader_Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeatLeader_Server.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20240328124905_UsernameChangesBan")]
    partial class UsernameChangesBan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeatLeader_Server.Models.AccountLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OculusID")
                        .HasColumnType("int");

                    b.Property<string>("PCOculusID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AccountLinkRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OculusID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Random")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountLinkRequests");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementDescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AchievementDescriptionId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AchievementDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AchievementDescriptions");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AchievementLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementDescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AchievementDescriptionId");

                    b.ToTable("AchievementLevels");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AuthID", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthIDs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AuthIP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthIPs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AuthInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Auths");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BanReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.BeatSaverLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeatSaverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BeatSaverLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AverageAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRank")
                        .HasColumnType("real");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaptureLeaderboardsCount")
                        .HasColumnType("int");

                    b.Property<string>("ClanRankingDiscordHook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordInvite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GlobalMapX")
                        .HasColumnType("real");

                    b.Property<float>("GlobalMapY")
                        .HasColumnType("real");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerChangesCallback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("int");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<float>("RankedPoolPercentCaptured")
                        .HasColumnType("real");

                    b.Property<string>("RichBio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ClanManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClanId")
                        .HasColumnType("int");

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ClanManagers");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ClanOrderChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClanOrderChanges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ClanRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AverageAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRank")
                        .HasColumnType("real");

                    b.Property<int?>("ClanId")
                        .HasColumnType("int");

                    b.Property<int>("LastUpdateTime")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("LeaderboardId");

                    b.ToTable("ClanRanking");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ClanUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClanId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ClanUpdates");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CountryChange", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CountryChanges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CountryChangeBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CountryChangeBans");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CriteriaCommentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscordMessageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EditTimeset")
                        .HasColumnType("int");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RankQualificationId");

                    b.ToTable("CriteriaCommentary");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CronTimestamps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoriesTimestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("cronTimestamps");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CustomMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomModes");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.DeveloperProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("DeveloperProfile");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.DifficultyDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("AccRating")
                        .HasColumnType("real");

                    b.Property<int>("Bombs")
                        .HasColumnType("int");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("FeatureTags")
                        .HasColumnType("int");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifierValuesModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiersRatingId")
                        .HasColumnType("int");

                    b.Property<float>("Njs")
                        .HasColumnType("real");

                    b.Property<int>("NominatedTime")
                        .HasColumnType("int");

                    b.Property<int>("Notes")
                        .HasColumnType("int");

                    b.Property<float>("Nps")
                        .HasColumnType("real");

                    b.Property<float?>("PassRating")
                        .HasColumnType("real");

                    b.Property<float?>("PredictedAcc")
                        .HasColumnType("real");

                    b.Property<int>("QualifiedTime")
                        .HasColumnType("int");

                    b.Property<int>("RankedTime")
                        .HasColumnType("int");

                    b.Property<int>("Requirements")
                        .HasColumnType("int");

                    b.Property<string>("SongId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpeedTags")
                        .HasColumnType("int");

                    b.Property<float?>("Stars")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StyleTags")
                        .HasColumnType("int");

                    b.Property<float?>("TechRating")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int>("Walls")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifierValuesModifierId");

                    b.HasIndex("ModifiersRatingId");

                    b.HasIndex("SongId");

                    b.HasIndex("Status");

                    b.ToTable("DifficultyDescription");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.DiscordLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiscordLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.EventPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventRankingId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventRankingId");

                    b.HasIndex("PlayerId");

                    b.ToTable("EventPlayer");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.EventRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EndDate")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventRankings");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ExternalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("ExternalStatus");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.FailedScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<int>("BaseScore")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FalsePositive")
                        .HasColumnType("bit");

                    b.Property<bool>("FullCombo")
                        .HasColumnType("bit");

                    b.Property<int>("Hmd")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedScore")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Replay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timeset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FailedScores");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.FeaturedPlaylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerCover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaylistLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeaturedPlaylist");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.GlobalMapChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("NewClan1Capture")
                        .HasColumnType("real");

                    b.Property<int?>("NewClan1Id")
                        .HasColumnType("int");

                    b.Property<float?>("NewClan1Pp")
                        .HasColumnType("real");

                    b.Property<float?>("NewClan2Capture")
                        .HasColumnType("real");

                    b.Property<int?>("NewClan2Id")
                        .HasColumnType("int");

                    b.Property<float?>("NewClan2Pp")
                        .HasColumnType("real");

                    b.Property<float?>("NewClan3Capture")
                        .HasColumnType("real");

                    b.Property<int?>("NewClan3Id")
                        .HasColumnType("int");

                    b.Property<float?>("NewClan3Pp")
                        .HasColumnType("real");

                    b.Property<float>("NewX")
                        .HasColumnType("real");

                    b.Property<float>("NewY")
                        .HasColumnType("real");

                    b.Property<float?>("OldClan1Capture")
                        .HasColumnType("real");

                    b.Property<int?>("OldClan1Id")
                        .HasColumnType("int");

                    b.Property<float?>("OldClan1Pp")
                        .HasColumnType("real");

                    b.Property<float?>("OldClan2Capture")
                        .HasColumnType("real");

                    b.Property<int?>("OldClan2Id")
                        .HasColumnType("int");

                    b.Property<float?>("OldClan2Pp")
                        .HasColumnType("real");

                    b.Property<float?>("OldClan3Capture")
                        .HasColumnType("real");

                    b.Property<int?>("OldClan3Id")
                        .HasColumnType("int");

                    b.Property<float?>("OldClan3Pp")
                        .HasColumnType("real");

                    b.Property<float>("OldX")
                        .HasColumnType("real");

                    b.Property<float>("OldY")
                        .HasColumnType("real");

                    b.Property<int?>("PlayerAction")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GlobalMapChanges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.GlobalMapHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClanId")
                        .HasColumnType("int");

                    b.Property<float>("GlobalMapCaptured")
                        .HasColumnType("real");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.ToTable("GlobalMapHistory");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Headset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Headsets");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Leaderboard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CapturedTime")
                        .HasColumnType("int");

                    b.Property<int?>("ClanId")
                        .HasColumnType("int");

                    b.Property<bool>("ClanRankingContested")
                        .HasColumnType("bit");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int?>("LeaderboardGroupId")
                        .HasColumnType("int");

                    b.Property<int>("NegativeVotes")
                        .HasColumnType("int");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<int>("Plays")
                        .HasColumnType("int");

                    b.Property<int>("PositiveVotes")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ReweightId")
                        .HasColumnType("int");

                    b.Property<string>("SongId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StarVotes")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<float>("VoteStars")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LeaderboardGroupId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("ReweightId");

                    b.HasIndex("SongId");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LeaderboardChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("NewAccRating")
                        .HasColumnType("real");

                    b.Property<int>("NewCriteriaMet")
                        .HasColumnType("int");

                    b.Property<int?>("NewModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("NewModifiersRatingId")
                        .HasColumnType("int");

                    b.Property<float>("NewPassRating")
                        .HasColumnType("real");

                    b.Property<float>("NewRankability")
                        .HasColumnType("real");

                    b.Property<float>("NewStars")
                        .HasColumnType("real");

                    b.Property<float>("NewTechRating")
                        .HasColumnType("real");

                    b.Property<int>("NewType")
                        .HasColumnType("int");

                    b.Property<float>("OldAccRating")
                        .HasColumnType("real");

                    b.Property<int>("OldCriteriaMet")
                        .HasColumnType("int");

                    b.Property<int?>("OldModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("OldModifiersRatingId")
                        .HasColumnType("int");

                    b.Property<float>("OldPassRating")
                        .HasColumnType("real");

                    b.Property<float>("OldRankability")
                        .HasColumnType("real");

                    b.Property<float>("OldStars")
                        .HasColumnType("real");

                    b.Property<float>("OldTechRating")
                        .HasColumnType("real");

                    b.Property<int>("OldType")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("NewModifiersModifierId");

                    b.HasIndex("NewModifiersRatingId");

                    b.HasIndex("OldModifiersModifierId");

                    b.HasIndex("OldModifiersRatingId");

                    b.ToTable("LeaderboardChange");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LeaderboardGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("LeaderboardGroup");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LoginAttempts");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LoginChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LoginChanges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ModifiersMap", b =>
                {
                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModifierId"));

                    b.Property<float>("DA")
                        .HasColumnType("real");

                    b.Property<float>("FS")
                        .HasColumnType("real");

                    b.Property<float>("GN")
                        .HasColumnType("real");

                    b.Property<float>("NA")
                        .HasColumnType("real");

                    b.Property<float>("NB")
                        .HasColumnType("real");

                    b.Property<float>("NF")
                        .HasColumnType("real");

                    b.Property<float>("NO")
                        .HasColumnType("real");

                    b.Property<float>("OP")
                        .HasColumnType("real");

                    b.Property<float>("PM")
                        .HasColumnType("real");

                    b.Property<float>("SA")
                        .HasColumnType("real");

                    b.Property<float>("SC")
                        .HasColumnType("real");

                    b.Property<float>("SF")
                        .HasColumnType("real");

                    b.Property<float>("SS")
                        .HasColumnType("real");

                    b.HasKey("ModifierId");

                    b.ToTable("Modifiers");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ModifiersRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("FSAccRating")
                        .HasColumnType("real");

                    b.Property<float>("FSPassRating")
                        .HasColumnType("real");

                    b.Property<float>("FSPredictedAcc")
                        .HasColumnType("real");

                    b.Property<float>("FSStars")
                        .HasColumnType("real");

                    b.Property<float>("FSTechRating")
                        .HasColumnType("real");

                    b.Property<float>("SFAccRating")
                        .HasColumnType("real");

                    b.Property<float>("SFPassRating")
                        .HasColumnType("real");

                    b.Property<float>("SFPredictedAcc")
                        .HasColumnType("real");

                    b.Property<float>("SFStars")
                        .HasColumnType("real");

                    b.Property<float>("SFTechRating")
                        .HasColumnType("real");

                    b.Property<float>("SSAccRating")
                        .HasColumnType("real");

                    b.Property<float>("SSPassRating")
                        .HasColumnType("real");

                    b.Property<float>("SSPredictedAcc")
                        .HasColumnType("real");

                    b.Property<float>("SSStars")
                        .HasColumnType("real");

                    b.Property<float>("SSTechRating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ModifiersRating");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PatreonFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftSaberColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightSaberColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatreonFeatures");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PatreonLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatreonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatreonLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("AccPp")
                        .HasColumnType("real");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<bool>("Bot")
                        .HasColumnType("bit");

                    b.Property<string>("ClanOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<int?>("DeveloperProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalProfileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<int>("LastWeekCountryRank")
                        .HasColumnType("int");

                    b.Property<float>("LastWeekPp")
                        .HasColumnType("real");

                    b.Property<int>("LastWeekRank")
                        .HasColumnType("int");

                    b.Property<int>("MapperId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PassPp")
                        .HasColumnType("real");

                    b.Property<int?>("PatreonFeaturesId")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int?>("ProfileSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RichBioTimeset")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScoreStatsId")
                        .HasColumnType("int");

                    b.Property<float>("TechPp")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Banned");

                    b.HasIndex("DeveloperProfileId");

                    b.HasIndex("PatreonFeaturesId");

                    b.HasIndex("ProfileSettingsId");

                    b.HasIndex("Rank");

                    b.HasIndex("ScoreStatsId");

                    b.HasIndex("Banned", "Pp", "ScoreStatsId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Changer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerChange");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerContextExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AccPp")
                        .HasColumnType("real");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<int>("Context")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<int>("LastWeekCountryRank")
                        .HasColumnType("int");

                    b.Property<float>("LastWeekPp")
                        .HasColumnType("real");

                    b.Property<int>("LastWeekRank")
                        .HasColumnType("int");

                    b.Property<float>("PassPp")
                        .HasColumnType("real");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreStatsId")
                        .HasColumnType("int");

                    b.Property<float>("TechPp")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ScoreStatsId");

                    b.HasIndex("PlayerId", "Context")
                        .IsUnique();

                    b.ToTable("PlayerContextExtensions");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerFriends", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerLeaderboardStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AccLeft")
                        .HasColumnType("real");

                    b.Property<float>("AccPP")
                        .HasColumnType("real");

                    b.Property<float>("AccRight")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("AnonimusReplayWatched")
                        .HasColumnType("int");

                    b.Property<int>("AuthorizedReplayWatched")
                        .HasColumnType("int");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<int>("BaseScore")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<float>("BonusPp")
                        .HasColumnType("real");

                    b.Property<int>("Controller")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<float>("FcAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("FcPp")
                        .HasColumnType("real");

                    b.Property<bool>("FullCombo")
                        .HasColumnType("bit");

                    b.Property<int>("Hmd")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("LeftTiming")
                        .HasColumnType("real");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<int?>("MaxStreak")
                        .HasColumnType("int");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedScore")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PassPP")
                        .HasColumnType("real");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Qualification")
                        .HasColumnType("bit");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplayOffsetsId")
                        .HasColumnType("int");

                    b.Property<float>("RightTiming")
                        .HasColumnType("real");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreImprovementId")
                        .HasColumnType("int");

                    b.Property<float>("TechPP")
                        .HasColumnType("real");

                    b.Property<float>("Time")
                        .HasColumnType("real");

                    b.Property<int>("Timepost")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("ReplayOffsetsId");

                    b.HasIndex("ScoreImprovementId");

                    b.ToTable("PlayerLeaderboardStats");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerScoreStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("APlays")
                        .HasColumnType("int");

                    b.Property<int>("AnonimusReplayWatched")
                        .HasColumnType("int");

                    b.Property<int>("AuthorizedReplayWatched")
                        .HasColumnType("int");

                    b.Property<float>("AverageAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageLeftTiming")
                        .HasColumnType("real");

                    b.Property<float>("AverageRank")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedRank")
                        .HasColumnType("real");

                    b.Property<float>("AverageRightTiming")
                        .HasColumnType("real");

                    b.Property<float>("AverageUnrankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageUnrankedRank")
                        .HasColumnType("real");

                    b.Property<float>("AverageWeightedRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageWeightedRankedRank")
                        .HasColumnType("real");

                    b.Property<float>("CountryTopPercentile")
                        .HasColumnType("real");

                    b.Property<int>("DailyImprovements")
                        .HasColumnType("int");

                    b.Property<int>("LastRankedScoreTime")
                        .HasColumnType("int");

                    b.Property<int>("LastScoreTime")
                        .HasColumnType("int");

                    b.Property<int>("LastUnrankedScoreTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxStreak")
                        .HasColumnType("int");

                    b.Property<float>("MedianAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("MedianRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("PeakRank")
                        .HasColumnType("real");

                    b.Property<int>("RankedImprovementsCount")
                        .HasColumnType("int");

                    b.Property<int>("RankedMaxStreak")
                        .HasColumnType("int");

                    b.Property<int>("RankedPlayCount")
                        .HasColumnType("int");

                    b.Property<int>("RankedTop1Count")
                        .HasColumnType("int");

                    b.Property<int>("RankedTop1Score")
                        .HasColumnType("int");

                    b.Property<int>("SPPlays")
                        .HasColumnType("int");

                    b.Property<int>("SPlays")
                        .HasColumnType("int");

                    b.Property<int>("SSPPlays")
                        .HasColumnType("int");

                    b.Property<int>("SSPlays")
                        .HasColumnType("int");

                    b.Property<int>("Top1Count")
                        .HasColumnType("int");

                    b.Property<int>("Top1Score")
                        .HasColumnType("int");

                    b.Property<float>("TopAccPP")
                        .HasColumnType("real");

                    b.Property<float>("TopAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("TopBonusPP")
                        .HasColumnType("real");

                    b.Property<int>("TopHMD")
                        .HasColumnType("int");

                    b.Property<float>("TopPassPP")
                        .HasColumnType("real");

                    b.Property<float>("TopPercentile")
                        .HasColumnType("real");

                    b.Property<string>("TopPlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TopPp")
                        .HasColumnType("real");

                    b.Property<float>("TopRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("TopTechPP")
                        .HasColumnType("real");

                    b.Property<float>("TopUnrankedAccuracy")
                        .HasColumnType("real");

                    b.Property<int>("TotalImprovementsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPlayCount")
                        .HasColumnType("int");

                    b.Property<long>("TotalRankedScore")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalScore")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalUnrankedScore")
                        .HasColumnType("bigint");

                    b.Property<int>("UnrankedImprovementsCount")
                        .HasColumnType("int");

                    b.Property<int>("UnrankedMaxStreak")
                        .HasColumnType("int");

                    b.Property<int>("UnrankedPlayCount")
                        .HasColumnType("int");

                    b.Property<int>("UnrankedTop1Count")
                        .HasColumnType("int");

                    b.Property<int>("UnrankedTop1Score")
                        .HasColumnType("int");

                    b.Property<int>("WatchedReplays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastRankedScoreTime");

                    b.HasIndex("RankedPlayCount");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerScoreStatsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("APlays")
                        .HasColumnType("int");

                    b.Property<float>("AverageAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageLeftTiming")
                        .HasColumnType("real");

                    b.Property<float>("AverageRank")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedRank")
                        .HasColumnType("real");

                    b.Property<float>("AverageRightTiming")
                        .HasColumnType("real");

                    b.Property<float>("AverageUnrankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageUnrankedRank")
                        .HasColumnType("real");

                    b.Property<float>("AverageWeightedRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageWeightedRankedRank")
                        .HasColumnType("real");

                    b.Property<int>("Context")
                        .HasColumnType("int");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<int>("DailyImprovements")
                        .HasColumnType("int");

                    b.Property<int>("LastRankedScoreTime")
                        .HasColumnType("int");

                    b.Property<int>("LastScoreTime")
                        .HasColumnType("int");

                    b.Property<int>("LastUnrankedScoreTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxStreak")
                        .HasColumnType("int");

                    b.Property<float>("MedianAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("MedianRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("PeakRank")
                        .HasColumnType("real");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RankedImprovementsCount")
                        .HasColumnType("int");

                    b.Property<int>("RankedPlayCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplaysWatched")
                        .HasColumnType("int");

                    b.Property<int>("SPPlays")
                        .HasColumnType("int");

                    b.Property<int>("SPlays")
                        .HasColumnType("int");

                    b.Property<int>("SSPPlays")
                        .HasColumnType("int");

                    b.Property<int>("SSPlays")
                        .HasColumnType("int");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.Property<float>("TopAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("TopBonusPP")
                        .HasColumnType("real");

                    b.Property<int>("TopHMD")
                        .HasColumnType("int");

                    b.Property<string>("TopPlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TopPp")
                        .HasColumnType("real");

                    b.Property<float>("TopRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("TopUnrankedAccuracy")
                        .HasColumnType("real");

                    b.Property<int>("TotalImprovementsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPlayCount")
                        .HasColumnType("int");

                    b.Property<long>("TotalRankedScore")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalScore")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalUnrankedScore")
                        .HasColumnType("bigint");

                    b.Property<int>("UnrankedImprovementsCount")
                        .HasColumnType("int");

                    b.Property<int>("UnrankedPlayCount")
                        .HasColumnType("int");

                    b.Property<int>("WatchedReplays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerScoreStatsHistory");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerSocial");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ProfileSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EffectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Hue")
                        .HasColumnType("real");

                    b.Property<string>("LeftSaberColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileAppearance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileCover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightSaberColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Saturation")
                        .HasColumnType("real");

                    b.Property<bool>("ShowAllRatings")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowBots")
                        .HasColumnType("bit");

                    b.Property<string>("StarredFriends")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfileSettings");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.QualificationChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("NewAccRating")
                        .HasColumnType("real");

                    b.Property<string>("NewCriteriaCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewCriteriaMet")
                        .HasColumnType("int");

                    b.Property<int?>("NewModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<float>("NewPassRating")
                        .HasColumnType("real");

                    b.Property<float>("NewRankability")
                        .HasColumnType("real");

                    b.Property<float>("NewStars")
                        .HasColumnType("real");

                    b.Property<float>("NewTechRating")
                        .HasColumnType("real");

                    b.Property<int>("NewType")
                        .HasColumnType("int");

                    b.Property<float>("OldAccRating")
                        .HasColumnType("real");

                    b.Property<string>("OldCriteriaCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldCriteriaMet")
                        .HasColumnType("int");

                    b.Property<int?>("OldModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<float>("OldPassRating")
                        .HasColumnType("real");

                    b.Property<float>("OldRankability")
                        .HasColumnType("real");

                    b.Property<float>("OldStars")
                        .HasColumnType("real");

                    b.Property<float>("OldTechRating")
                        .HasColumnType("real");

                    b.Property<int>("OldType")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewModifiersModifierId");

                    b.HasIndex("OldModifiersModifierId");

                    b.HasIndex("RankQualificationId");

                    b.ToTable("QualificationChange");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.QualificationCommentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscordMessageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EditTimeset")
                        .HasColumnType("int");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RankQualificationId");

                    b.ToTable("QualificationCommentary");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.QualificationVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscordRTMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EditTimeset")
                        .HasColumnType("int");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RankQualificationId");

                    b.ToTable("QualificationVote");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalTimeset")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Approvers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriteriaCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriteriaChecker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriteriaCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriteriaMet")
                        .HasColumnType("int");

                    b.Property<int>("CriteriaTimeset")
                        .HasColumnType("int");

                    b.Property<string>("DiscordChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordRTChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MapperAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("MapperId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MapperQualification")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiersRatingId")
                        .HasColumnType("int");

                    b.Property<int>("QualityVote")
                        .HasColumnType("int");

                    b.Property<string>("RTMember")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifiersModifierId");

                    b.HasIndex("ModifiersRatingId");

                    b.ToTable("RankQualification");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CriteriaCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriteriaMet")
                        .HasColumnType("int");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<bool>("Keep")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiersRatingId")
                        .HasColumnType("int");

                    b.Property<float>("PassRating")
                        .HasColumnType("real");

                    b.Property<float>("PredictedAcc")
                        .HasColumnType("real");

                    b.Property<string>("RTMember")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Stars")
                        .HasColumnType("real");

                    b.Property<float>("TechRating")
                        .HasColumnType("real");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifiersModifierId");

                    b.HasIndex("ModifiersRatingId");

                    b.ToTable("RankUpdate");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankUpdateChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewCriteriaCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewCriteriaMet")
                        .HasColumnType("int");

                    b.Property<bool>("NewKeep")
                        .HasColumnType("bit");

                    b.Property<int?>("NewModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<float>("NewStars")
                        .HasColumnType("real");

                    b.Property<int>("NewType")
                        .HasColumnType("int");

                    b.Property<string>("OldCriteriaCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldCriteriaMet")
                        .HasColumnType("int");

                    b.Property<bool>("OldKeep")
                        .HasColumnType("bit");

                    b.Property<int?>("OldModifiersModifierId")
                        .HasColumnType("int");

                    b.Property<float>("OldStars")
                        .HasColumnType("real");

                    b.Property<int>("OldType")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankUpdateId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewModifiersModifierId");

                    b.HasIndex("OldModifiersModifierId");

                    b.HasIndex("RankUpdateId");

                    b.ToTable("RankUpdateChange");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankVoting", b =>
                {
                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.Property<string>("Diff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rankability")
                        .HasColumnType("real");

                    b.Property<float>("Stars")
                        .HasColumnType("real");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.ToTable("RankVotings");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReePresetDownload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Player")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PresetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReePresetDownloads");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EditTimeset")
                        .HasColumnType("int");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReeSabersPresetId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReeSabersPresetId");

                    b.ToTable("ReeSabersComment");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<bool>("CommentsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("CoverLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownloadsCount")
                        .HasColumnType("int");

                    b.Property<string>("JsonLinks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PCDownloadsCount")
                        .HasColumnType("int");

                    b.Property<int>("QuestDownloadsCount")
                        .HasColumnType("int");

                    b.Property<int>("ReactionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RemixId")
                        .HasColumnType("int");

                    b.Property<int>("Tags")
                        .HasColumnType("int");

                    b.Property<string>("TextureLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeposted")
                        .HasColumnType("int");

                    b.Property<int>("Timeupdated")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RemixId");

                    b.ToTable("ReeSabersPresets");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.Property<int?>("ReeSabersCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReeSabersPresetId")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReeSabersCommentId");

                    b.HasIndex("ReeSabersPresetId");

                    b.ToTable("ReeSabersReaction");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReplayWatchingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScoreId");

                    b.ToTable("WatchingSessions");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReservedClanTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservedTags");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AccLeft")
                        .HasColumnType("real");

                    b.Property<float>("AccPP")
                        .HasColumnType("real");

                    b.Property<float>("AccRight")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("AnonimusReplayWatched")
                        .HasColumnType("int");

                    b.Property<int>("AuthorizedReplayWatched")
                        .HasColumnType("int");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<int>("BaseScore")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<float>("BonusPp")
                        .HasColumnType("real");

                    b.Property<bool>("Bot")
                        .HasColumnType("bit");

                    b.Property<int>("Controller")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<float>("FcAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("FcPp")
                        .HasColumnType("real");

                    b.Property<bool>("FullCombo")
                        .HasColumnType("bit");

                    b.Property<int>("Hmd")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoreForStats")
                        .HasColumnType("bit");

                    b.Property<string>("LeaderboardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("LeftTiming")
                        .HasColumnType("real");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<int?>("MaxStreak")
                        .HasColumnType("int");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("int");

                    b.Property<bool>("Migrated")
                        .HasColumnType("bit");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedScore")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PassPP")
                        .HasColumnType("real");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Qualification")
                        .HasColumnType("bit");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReplayOffsetsId")
                        .HasColumnType("int");

                    b.Property<float>("RightTiming")
                        .HasColumnType("real");

                    b.Property<int?>("ScoreImprovementId")
                        .HasColumnType("int");

                    b.Property<bool>("Suspicious")
                        .HasColumnType("bit");

                    b.Property<float>("TechPP")
                        .HasColumnType("real");

                    b.Property<int>("Timepost")
                        .HasColumnType("int");

                    b.Property<string>("Timeset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidContexts")
                        .HasColumnType("int");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Accuracy");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("MetadataId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Pp");

                    b.HasIndex("ReplayOffsetsId");

                    b.HasIndex("ScoreImprovementId");

                    b.HasIndex("Timepost");

                    b.HasIndex("Timepost", "Replay");

                    b.HasIndex("Banned", "Qualification", "Pp");

                    b.HasIndex("PlayerId", "LeaderboardId", "ValidContexts")
                        .IsUnique();

                    b.HasIndex("PlayerId", "Banned", "Qualification", "Pp");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreContextExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AccPP")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<int>("BaseScore")
                        .HasColumnType("int");

                    b.Property<float>("BonusPp")
                        .HasColumnType("real");

                    b.Property<int>("Context")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ModifiedScore")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PassPP")
                        .HasColumnType("real");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Qualification")
                        .HasColumnType("bit");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreImprovementId")
                        .HasColumnType("int");

                    b.Property<float>("TechPP")
                        .HasColumnType("real");

                    b.Property<int>("Timepost")
                        .HasColumnType("int");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("ScoreId");

                    b.HasIndex("ScoreImprovementId");

                    b.HasIndex("PlayerId", "LeaderboardId", "Context")
                        .IsUnique();

                    b.ToTable("ScoreContextExtensions");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreImprovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AccLeft")
                        .HasColumnType("real");

                    b.Property<float>("AccRight")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<float>("BonusPp")
                        .HasColumnType("real");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Timeset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPp")
                        .HasColumnType("real");

                    b.Property<int>("TotalRank")
                        .HasColumnType("int");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoreImprovement");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkServiceIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PinnedContexts")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoreMetadata");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreRedirect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NewScoreId")
                        .HasColumnType("int");

                    b.Property<int>("OldScoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoreRedirects");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreRemovalLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoreRemovalLogs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Song", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Bpm")
                        .HasColumnType("float");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("CollaboratorIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("FullCoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mapper")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MapperId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Refreshed")
                        .HasColumnType("bit");

                    b.Property<string>("SubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.SongSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SearchId")
                        .HasColumnType("int");

                    b.Property<string>("SongId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("SongSearches");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.SongSuggestRefresh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongsFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SongSuggestRefreshes");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.SongsLastUpdateTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SongsLastUpdateTimes");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.SurveyPassed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.TwitchLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TwitchLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.TwitterLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TwitterLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.UsernamePfpChangeBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UsernamePfpChangeBans");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.VRController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VRControllers");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ValentineMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<bool>("Viewed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ValentineMessages");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.VoterFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RTMember")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankVotingScoreId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("RankVotingScoreId");

                    b.ToTable("VoterFeedback");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.YouTubeLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("YouTubeLinks");
                });

            modelBuilder.Entity("ClanFeaturedPlaylist", b =>
                {
                    b.Property<int>("ClansId")
                        .HasColumnType("int");

                    b.Property<int>("FeaturedPlaylistsId")
                        .HasColumnType("int");

                    b.HasKey("ClansId", "FeaturedPlaylistsId");

                    b.HasIndex("FeaturedPlaylistsId");

                    b.ToTable("ClanFeaturedPlaylist");
                });

            modelBuilder.Entity("ClanPlayer", b =>
                {
                    b.Property<int>("ClansId")
                        .HasColumnType("int");

                    b.Property<string>("PlayersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClansId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("ClanPlayer");
                });

            modelBuilder.Entity("ClanUser", b =>
                {
                    b.Property<int>("BannedClansId")
                        .HasColumnType("int");

                    b.Property<string>("BannedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BannedClansId", "BannedId");

                    b.HasIndex("BannedId");

                    b.ToTable("ClanUser");
                });

            modelBuilder.Entity("ClanUser1", b =>
                {
                    b.Property<int>("ClanRequestId")
                        .HasColumnType("int");

                    b.Property<string>("RequestsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClanRequestId", "RequestsId");

                    b.HasIndex("RequestsId");

                    b.ToTable("ClanUser1");
                });

            modelBuilder.Entity("EventRankingLeaderboard", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventsId", "LeaderboardsId");

                    b.HasIndex("LeaderboardsId");

                    b.ToTable("EventRankingLeaderboard");
                });

            modelBuilder.Entity("FeaturedPlaylistLeaderboard", b =>
                {
                    b.Property<int>("FeaturedPlaylistsId")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeaturedPlaylistsId", "LeaderboardsId");

                    b.HasIndex("LeaderboardsId");

                    b.ToTable("FeaturedPlaylistLeaderboard");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DeveloperProfileId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("DeveloperProfileId");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("PlayerPlayerFriends", b =>
                {
                    b.Property<string>("FriendsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerFriendsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FriendsId", "PlayerFriendsId");

                    b.HasIndex("PlayerFriendsId");

                    b.ToTable("PlayerPlayerFriends");
                });

            modelBuilder.Entity("ReplayDecoder.ReplayOffsets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Frames")
                        .HasColumnType("int");

                    b.Property<int>("Heights")
                        .HasColumnType("int");

                    b.Property<int>("Notes")
                        .HasColumnType("int");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<int>("Walls")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReplayOffsets");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Achievement", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.AchievementDescription", "AchievementDescription")
                        .WithMany("Achievements")
                        .HasForeignKey("AchievementDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.AchievementLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany("Achievements")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementDescription");

                    b.Navigation("Level");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AchievementLevel", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.AchievementDescription", null)
                        .WithMany("Levels")
                        .HasForeignKey("AchievementDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Badge", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany("Badges")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ClanManager", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", "Clan")
                        .WithMany("Managers")
                        .HasForeignKey("ClanId");

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany("ManagingClans")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Clan");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ClanRanking", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", "Clan")
                        .WithMany()
                        .HasForeignKey("ClanId");

                    b.HasOne("BeatLeader_Server.Models.Leaderboard", "Leaderboard")
                        .WithMany("ClanRanking")
                        .HasForeignKey("LeaderboardId");

                    b.Navigation("Clan");

                    b.Navigation("Leaderboard");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ClanUpdate", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", "Clan")
                        .WithMany("Updates")
                        .HasForeignKey("ClanId");

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Clan");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CriteriaCommentary", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.RankQualification", "RankQualification")
                        .WithMany("CriteriaComments")
                        .HasForeignKey("RankQualificationId");

                    b.Navigation("RankQualification");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.DifficultyDescription", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "ModifierValues")
                        .WithMany()
                        .HasForeignKey("ModifierValuesModifierId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersRating", "ModifiersRating")
                        .WithMany()
                        .HasForeignKey("ModifiersRatingId");

                    b.HasOne("BeatLeader_Server.Models.Song", null)
                        .WithMany("Difficulties")
                        .HasForeignKey("SongId");

                    b.Navigation("ModifierValues");

                    b.Navigation("ModifiersRating");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.EventPlayer", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.EventRanking", "Event")
                        .WithMany("Players")
                        .HasForeignKey("EventRankingId");

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany("EventsParticipating")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ExternalStatus", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Song", null)
                        .WithMany("ExternalStatuses")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.FailedScore", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Leaderboard", "Leaderboard")
                        .WithMany()
                        .HasForeignKey("LeaderboardId");

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaderboard");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.GlobalMapHistory", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", "Clan")
                        .WithMany("History")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Leaderboard", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", "Clan")
                        .WithMany("CapturedLeaderboards")
                        .HasForeignKey("ClanId");

                    b.HasOne("BeatLeader_Server.Models.DifficultyDescription", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.LeaderboardGroup", "LeaderboardGroup")
                        .WithMany("Leaderboards")
                        .HasForeignKey("LeaderboardGroupId");

                    b.HasOne("BeatLeader_Server.Models.RankQualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId");

                    b.HasOne("BeatLeader_Server.Models.RankUpdate", "Reweight")
                        .WithMany()
                        .HasForeignKey("ReweightId");

                    b.HasOne("BeatLeader_Server.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId");

                    b.Navigation("Clan");

                    b.Navigation("Difficulty");

                    b.Navigation("LeaderboardGroup");

                    b.Navigation("Qualification");

                    b.Navigation("Reweight");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LeaderboardChange", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Leaderboard", null)
                        .WithMany("Changes")
                        .HasForeignKey("LeaderboardId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "NewModifiers")
                        .WithMany()
                        .HasForeignKey("NewModifiersModifierId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersRating", "NewModifiersRating")
                        .WithMany()
                        .HasForeignKey("NewModifiersRatingId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "OldModifiers")
                        .WithMany()
                        .HasForeignKey("OldModifiersModifierId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersRating", "OldModifiersRating")
                        .WithMany()
                        .HasForeignKey("OldModifiersRatingId");

                    b.Navigation("NewModifiers");

                    b.Navigation("NewModifiersRating");

                    b.Navigation("OldModifiers");

                    b.Navigation("OldModifiersRating");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Player", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.DeveloperProfile", "DeveloperProfile")
                        .WithMany()
                        .HasForeignKey("DeveloperProfileId");

                    b.HasOne("BeatLeader_Server.Models.PatreonFeatures", "PatreonFeatures")
                        .WithMany()
                        .HasForeignKey("PatreonFeaturesId");

                    b.HasOne("BeatLeader_Server.Models.ProfileSettings", "ProfileSettings")
                        .WithMany()
                        .HasForeignKey("ProfileSettingsId");

                    b.HasOne("BeatLeader_Server.Models.PlayerScoreStats", "ScoreStats")
                        .WithMany()
                        .HasForeignKey("ScoreStatsId");

                    b.Navigation("DeveloperProfile");

                    b.Navigation("PatreonFeatures");

                    b.Navigation("ProfileSettings");

                    b.Navigation("ScoreStats");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerChange", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany("Changes")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerContextExtension", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany("ContextExtensions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.PlayerScoreStats", "ScoreStats")
                        .WithMany()
                        .HasForeignKey("ScoreStatsId");

                    b.Navigation("Player");

                    b.Navigation("ScoreStats");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerLeaderboardStats", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Leaderboard", "Leaderboard")
                        .WithMany("PlayerStats")
                        .HasForeignKey("LeaderboardId");

                    b.HasOne("ReplayDecoder.ReplayOffsets", "ReplayOffsets")
                        .WithMany()
                        .HasForeignKey("ReplayOffsetsId");

                    b.HasOne("BeatLeader_Server.Models.ScoreImprovement", "ScoreImprovement")
                        .WithMany()
                        .HasForeignKey("ScoreImprovementId");

                    b.Navigation("Leaderboard");

                    b.Navigation("ReplayOffsets");

                    b.Navigation("ScoreImprovement");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerScoreStatsHistory", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany("History")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerSocial", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany("Socials")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Playlist", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.User", null)
                        .WithMany("Playlists")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.QualificationChange", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "NewModifiers")
                        .WithMany()
                        .HasForeignKey("NewModifiersModifierId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "OldModifiers")
                        .WithMany()
                        .HasForeignKey("OldModifiersModifierId");

                    b.HasOne("BeatLeader_Server.Models.RankQualification", null)
                        .WithMany("Changes")
                        .HasForeignKey("RankQualificationId");

                    b.Navigation("NewModifiers");

                    b.Navigation("OldModifiers");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.QualificationCommentary", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.RankQualification", "RankQualification")
                        .WithMany("Comments")
                        .HasForeignKey("RankQualificationId");

                    b.Navigation("RankQualification");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.QualificationVote", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.RankQualification", "RankQualification")
                        .WithMany("Votes")
                        .HasForeignKey("RankQualificationId");

                    b.Navigation("RankQualification");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankQualification", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "Modifiers")
                        .WithMany()
                        .HasForeignKey("ModifiersModifierId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersRating", "ModifiersRating")
                        .WithMany()
                        .HasForeignKey("ModifiersRatingId");

                    b.Navigation("Modifiers");

                    b.Navigation("ModifiersRating");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankUpdate", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "Modifiers")
                        .WithMany()
                        .HasForeignKey("ModifiersModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.ModifiersRating", "ModifiersRating")
                        .WithMany()
                        .HasForeignKey("ModifiersRatingId");

                    b.Navigation("Modifiers");

                    b.Navigation("ModifiersRating");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankUpdateChange", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "NewModifiers")
                        .WithMany()
                        .HasForeignKey("NewModifiersModifierId");

                    b.HasOne("BeatLeader_Server.Models.ModifiersMap", "OldModifiers")
                        .WithMany()
                        .HasForeignKey("OldModifiersModifierId");

                    b.HasOne("BeatLeader_Server.Models.RankUpdate", null)
                        .WithMany("Changes")
                        .HasForeignKey("RankUpdateId");

                    b.Navigation("NewModifiers");

                    b.Navigation("OldModifiers");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankVoting", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Score", null)
                        .WithOne("RankVoting")
                        .HasForeignKey("BeatLeader_Server.Models.RankVoting", "ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersComment", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.ReeSabersPreset", null)
                        .WithMany("Comments")
                        .HasForeignKey("ReeSabersPresetId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersPreset", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", "Owner")
                        .WithMany("Presets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.ReeSabersPreset", "Remix")
                        .WithMany("Remixes")
                        .HasForeignKey("RemixId");

                    b.Navigation("Owner");

                    b.Navigation("Remix");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersReaction", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.ReeSabersComment", null)
                        .WithMany("Reactions")
                        .HasForeignKey("ReeSabersCommentId");

                    b.HasOne("BeatLeader_Server.Models.ReeSabersPreset", null)
                        .WithMany("Reactions")
                        .HasForeignKey("ReeSabersPresetId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Score", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Leaderboard", "Leaderboard")
                        .WithMany("Scores")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.ScoreMetadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReplayDecoder.ReplayOffsets", "ReplayOffsets")
                        .WithMany()
                        .HasForeignKey("ReplayOffsetsId");

                    b.HasOne("BeatLeader_Server.Models.ScoreImprovement", "ScoreImprovement")
                        .WithMany()
                        .HasForeignKey("ScoreImprovementId");

                    b.Navigation("Leaderboard");

                    b.Navigation("Metadata");

                    b.Navigation("Player");

                    b.Navigation("ReplayOffsets");

                    b.Navigation("ScoreImprovement");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreContextExtension", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Leaderboard", "Leaderboard")
                        .WithMany("ContextExtensions")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Score", "Score")
                        .WithMany("ContextExtensions")
                        .HasForeignKey("ScoreId");

                    b.HasOne("BeatLeader_Server.Models.ScoreImprovement", "ScoreImprovement")
                        .WithMany()
                        .HasForeignKey("ScoreImprovementId");

                    b.Navigation("Leaderboard");

                    b.Navigation("Player");

                    b.Navigation("Score");

                    b.Navigation("ScoreImprovement");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.SongSearch", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Song", "Song")
                        .WithMany("Searches")
                        .HasForeignKey("SongId");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.User", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.VoterFeedback", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.RankVoting", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("RankVotingScoreId");
                });

            modelBuilder.Entity("ClanFeaturedPlaylist", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.FeaturedPlaylist", null)
                        .WithMany()
                        .HasForeignKey("FeaturedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClanPlayer", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClanUser", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("BannedClansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("BannedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClanUser1", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClanRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventRankingLeaderboard", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.EventRanking", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Leaderboard", null)
                        .WithMany()
                        .HasForeignKey("LeaderboardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeaturedPlaylistLeaderboard", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.FeaturedPlaylist", null)
                        .WithMany()
                        .HasForeignKey("FeaturedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Leaderboard", null)
                        .WithMany()
                        .HasForeignKey("LeaderboardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.DeveloperProfile", null)
                        .WithMany("OauthApps")
                        .HasForeignKey("DeveloperProfileId");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("PlayerPlayerFriends", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.PlayerFriends", null)
                        .WithMany()
                        .HasForeignKey("PlayerFriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AchievementDescription", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Clan", b =>
                {
                    b.Navigation("CapturedLeaderboards");

                    b.Navigation("History");

                    b.Navigation("Managers");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.DeveloperProfile", b =>
                {
                    b.Navigation("OauthApps");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.EventRanking", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Leaderboard", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("ClanRanking");

                    b.Navigation("ContextExtensions");

                    b.Navigation("PlayerStats");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LeaderboardGroup", b =>
                {
                    b.Navigation("Leaderboards");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Player", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Badges");

                    b.Navigation("Changes");

                    b.Navigation("ContextExtensions");

                    b.Navigation("EventsParticipating");

                    b.Navigation("History");

                    b.Navigation("ManagingClans");

                    b.Navigation("Presets");

                    b.Navigation("Socials");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankQualification", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("Comments");

                    b.Navigation("CriteriaComments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankUpdate", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankVoting", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersComment", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReeSabersPreset", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");

                    b.Navigation("Remixes");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Score", b =>
                {
                    b.Navigation("ContextExtensions");

                    b.Navigation("RankVoting");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Song", b =>
                {
                    b.Navigation("Difficulties");

                    b.Navigation("ExternalStatuses");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.User", b =>
                {
                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
