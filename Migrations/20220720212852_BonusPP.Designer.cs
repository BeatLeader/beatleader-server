// <auto-generated />
using System;
using BeatLeader_Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeatLeader_Server.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20220720212852_BonusPP")]
    partial class BonusPP
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeatLeader_Server.Models.AccountLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OculusID")
                        .HasColumnType("int");

                    b.Property<string>("PCOculusID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AccountLinkRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OculusID")
                        .HasColumnType("int");

                    b.Property<int>("Random")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountLinkRequests");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AccuracyTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AccLeft")
                        .HasColumnType("real");

                    b.Property<float>("AccRight")
                        .HasColumnType("real");

                    b.Property<float>("AveragePreswing")
                        .HasColumnType("real");

                    b.Property<string>("GridAccS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftAverageCutS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("LeftPostswing")
                        .HasColumnType("real");

                    b.Property<float>("LeftPreswing")
                        .HasColumnType("real");

                    b.Property<float>("LeftTimeDependence")
                        .HasColumnType("real");

                    b.Property<string>("RightAverageCutS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RightPostswing")
                        .HasColumnType("real");

                    b.Property<float>("RightPreswing")
                        .HasColumnType("real");

                    b.Property<float>("RightTimeDependence")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("AccuracyTracker");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AuthID", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthIDs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AuthInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auths");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.AuthIP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthIPs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BanReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AverageAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRank")
                        .HasColumnType("real");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("int");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CountryChange", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CountryChanges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CronTimestamps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HistoriesTimestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("cronTimestamps");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.CustomMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomModes");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.DifficultyDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Bombs")
                        .HasColumnType("int");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Njs")
                        .HasColumnType("real");

                    b.Property<int>("Notes")
                        .HasColumnType("int");

                    b.Property<float>("Nps")
                        .HasColumnType("real");

                    b.Property<bool>("Qualified")
                        .HasColumnType("bit");

                    b.Property<string>("QualifiedTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ranked")
                        .HasColumnType("bit");

                    b.Property<string>("RankedTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("Stars")
                        .HasColumnType("real");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int>("Walls")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("DifficultyDescription");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.FailedScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<int>("BaseScore")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FullCombo")
                        .HasColumnType("bit");

                    b.Property<int>("Hmd")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedScore")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Replay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timeset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FailedScores");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.HitTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LeftBadCuts")
                        .HasColumnType("int");

                    b.Property<int>("LeftBombs")
                        .HasColumnType("int");

                    b.Property<int>("LeftMiss")
                        .HasColumnType("int");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<int>("RightBadCuts")
                        .HasColumnType("int");

                    b.Property<int>("RightBombs")
                        .HasColumnType("int");

                    b.Property<int>("RightMiss")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HitTracker");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Leaderboard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("Plays")
                        .HasColumnType("int");

                    b.Property<string>("SongId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("SongId");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LoginAttempts");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.LoginChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NewLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LoginChanges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PatreonFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftSaberColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightSaberColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatreonFeatures");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PatreonLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatreonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatreonLinks");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("AllTime")
                        .HasColumnType("real");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<string>("ExternalProfileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Histories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<float>("LastTwoWeeksTime")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatreonFeaturesId")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("StatsHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatreonFeaturesId");

                    b.HasIndex("ScoreStatsId");

                    b.HasIndex("StatsHistoryId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerFriends", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerScoreStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("APlays")
                        .HasColumnType("int");

                    b.Property<float>("AverageAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRank")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedRank")
                        .HasColumnType("real");

                    b.Property<int>("DailyImprovements")
                        .HasColumnType("int");

                    b.Property<float>("MedianAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("MedianRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<int>("RankedPlayCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplaysWatched")
                        .HasColumnType("int");

                    b.Property<int>("SPPlays")
                        .HasColumnType("int");

                    b.Property<int>("SPlays")
                        .HasColumnType("int");

                    b.Property<int>("SSPPlays")
                        .HasColumnType("int");

                    b.Property<int>("SSPlays")
                        .HasColumnType("int");

                    b.Property<float>("TopAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("TopBonusPP")
                        .HasColumnType("real");

                    b.Property<int>("TopHMD")
                        .HasColumnType("int");

                    b.Property<string>("TopPlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TopPp")
                        .HasColumnType("real");

                    b.Property<int>("TotalPlayCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.PlayerStatsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AverageAccuracy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AverageRankedAccuracy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedianAccuracy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedianRankedAccuracy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RankedPlayCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplaysWatched")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopAccuracy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopPp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalPlayCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatsHistory");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankVoting", b =>
                {
                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.Property<string>("Diff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rankability")
                        .HasColumnType("real");

                    b.Property<float>("Stars")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.ToTable("RankVotings");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ReservedClanTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservedTags");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AccLeft")
                        .HasColumnType("real");

                    b.Property<float>("AccRight")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<int>("BaseScore")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<float>("BonusPp")
                        .HasColumnType("real");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<bool>("FullCombo")
                        .HasColumnType("bit");

                    b.Property<int>("Hmd")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedScore")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Replay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScoreImprovementId")
                        .HasColumnType("int");

                    b.Property<int>("Timepost")
                        .HasColumnType("int");

                    b.Property<string>("Timeset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ScoreImprovementId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreGraphTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GraphS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScoreGraphTracker");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreImprovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AccLeft")
                        .HasColumnType("real");

                    b.Property<float>("AccRight")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<float>("AverageRankedAccuracy")
                        .HasColumnType("real");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<float>("BonusPp")
                        .HasColumnType("real");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Timeset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPp")
                        .HasColumnType("real");

                    b.Property<int>("TotalRank")
                        .HasColumnType("int");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoreImprovement");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreRemovalLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoreRemovalLogs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccuracyTrackerId")
                        .HasColumnType("int");

                    b.Property<int>("HitTrackerId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreGraphTrackerId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int>("WinTrackerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccuracyTrackerId");

                    b.HasIndex("HitTrackerId");

                    b.HasIndex("ScoreGraphTrackerId");

                    b.HasIndex("WinTrackerId");

                    b.ToTable("ScoreStatistics");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Song", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Bpm")
                        .HasColumnType("float");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mapper")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.WinTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("EndTime")
                        .HasColumnType("real");

                    b.Property<float>("JumpDistance")
                        .HasColumnType("real");

                    b.Property<int>("NbOfPause")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<bool>("Won")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WinTracker");
                });

            modelBuilder.Entity("ClanPlayer", b =>
                {
                    b.Property<int>("ClansId")
                        .HasColumnType("int");

                    b.Property<string>("PlayersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClansId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("ClanPlayer");
                });

            modelBuilder.Entity("ClanUser", b =>
                {
                    b.Property<int>("BannedClansId")
                        .HasColumnType("int");

                    b.Property<string>("BannedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BannedClansId", "BannedId");

                    b.HasIndex("BannedId");

                    b.ToTable("ClanUser");
                });

            modelBuilder.Entity("ClanUser1", b =>
                {
                    b.Property<int>("ClanRequestId")
                        .HasColumnType("int");

                    b.Property<string>("RequestsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClanRequestId", "RequestsId");

                    b.HasIndex("RequestsId");

                    b.ToTable("ClanUser1");
                });

            modelBuilder.Entity("PlayerPlayerFriends", b =>
                {
                    b.Property<string>("FriendsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerFriendsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FriendsId", "PlayerFriendsId");

                    b.HasIndex("PlayerFriendsId");

                    b.ToTable("PlayerPlayerFriends");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Badge", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany("Badges")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.DifficultyDescription", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Song", null)
                        .WithMany("Difficulties")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.FailedScore", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Leaderboard", "Leaderboard")
                        .WithMany()
                        .HasForeignKey("LeaderboardId");

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaderboard");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Leaderboard", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.DifficultyDescription", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId");

                    b.Navigation("Difficulty");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Player", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.PatreonFeatures", "PatreonFeatures")
                        .WithMany()
                        .HasForeignKey("PatreonFeaturesId");

                    b.HasOne("BeatLeader_Server.Models.PlayerScoreStats", "ScoreStats")
                        .WithMany()
                        .HasForeignKey("ScoreStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.PlayerStatsHistory", "StatsHistory")
                        .WithMany()
                        .HasForeignKey("StatsHistoryId");

                    b.Navigation("PatreonFeatures");

                    b.Navigation("ScoreStats");

                    b.Navigation("StatsHistory");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Playlist", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.User", null)
                        .WithMany("Playlists")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.RankVoting", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Score", null)
                        .WithOne("RankVoting")
                        .HasForeignKey("BeatLeader_Server.Models.RankVoting", "ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Score", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Leaderboard", "Leaderboard")
                        .WithMany("Scores")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.ScoreImprovement", "ScoreImprovement")
                        .WithMany()
                        .HasForeignKey("ScoreImprovementId");

                    b.Navigation("Leaderboard");

                    b.Navigation("Player");

                    b.Navigation("ScoreImprovement");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.ScoreStatistic", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.AccuracyTracker", "AccuracyTracker")
                        .WithMany()
                        .HasForeignKey("AccuracyTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.HitTracker", "HitTracker")
                        .WithMany()
                        .HasForeignKey("HitTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.ScoreGraphTracker", "ScoreGraphTracker")
                        .WithMany()
                        .HasForeignKey("ScoreGraphTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.WinTracker", "WinTracker")
                        .WithMany()
                        .HasForeignKey("WinTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccuracyTracker");

                    b.Navigation("HitTracker");

                    b.Navigation("ScoreGraphTracker");

                    b.Navigation("WinTracker");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.User", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClanPlayer", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClanUser", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("BannedClansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("BannedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClanUser1", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClanRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerPlayerFriends", b =>
                {
                    b.HasOne("BeatLeader_Server.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatLeader_Server.Models.PlayerFriends", null)
                        .WithMany()
                        .HasForeignKey("PlayerFriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Leaderboard", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Player", b =>
                {
                    b.Navigation("Badges");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Score", b =>
                {
                    b.Navigation("RankVoting");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.Song", b =>
                {
                    b.Navigation("Difficulties");
                });

            modelBuilder.Entity("BeatLeader_Server.Models.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
